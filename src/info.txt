/* eslint-disable no-unused-vars */
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const MoneyTransfer = () => {
  const [pin, setPin] = useState(["", "", "", ""]);
  const [userId, setUserId] = useState(null); // Assume you have user ID stored after login
  const navigate = useNavigate();

  useEffect(() => {
    // Fetch the user data after login
    const userEmail = "john@example.com"; // Example: replace with actual logged-in user's email
    fetchUser(userEmail).then((user) => {
      setUserId(user?.id);
    });
  }, []);

  const fetchUser = async (email) => {
    try {
      const response = await fetch(`http://localhost:5000/users?email=${email}`);
      const data = await response.json();
      if (data.length > 0) {
        return data[0];
      }
    } catch (error) {
      console.error('Error fetching user:', error);
    }
  };

  const handlePinChange = (e, index) => {
    const value = e.target.value;
    if (value.length <= 1 && /^[0-9]*$/.test(value)) {
      const newPin = [...pin];
      newPin[index] = value;
      setPin(newPin);
    }
  };

  const validatePin = async () => {
    if (pin.every((p) => p !== "")) {
      const enteredPin = pin.join("");

      if (userId) {
        // Fetch the user's stored pin from the server
        const response = await fetch(`http://localhost:5000/users/${userId}`);
        const userData = await response.json();

        // Compare the stored PIN with the entered PIN
        if (userData.transactionPin === enteredPin) {
          alert("PIN validated successfully! Proceeding with transfer.");
          // Proceed with money transfer logic here
        } else {
          alert("Invalid PIN. Please try again.");
        }
      }
    } else {
      alert("Please enter your complete PIN.");
    }
  };

  return (
    <div className="transfer-container">
      <h2>Enter Transaction PIN</h2>
      <div className="pin-inputs">
        {pin.map((digit, index) => (
          <input
            key={index}
            type="text"
            maxLength="1"
            value={digit}
            onChange={(e) => handlePinChange(e, index)}
            className="pin-input"
          />
        ))}
      </div>
      <button onClick={validatePin}>Confirm Transfer</button>
    </div>
  );
};

export default MoneyTransfer;
